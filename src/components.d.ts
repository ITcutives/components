/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface MyComponent {
      'first': string;
      'last': string;
    }

    interface PcBadge {
      'bg': string;
      'text': string;
    }

    interface PcCardElement {
      'bg': string;
      'type': string;
    }

    interface PcCard {

    }

    interface PcFab {
      'bg': string;
    }

    interface PcHeader {
      'description': string;
      'logo': string;
      'theme': string;
    }
  }


    interface HTMLMyComponentElement extends StencilComponents.MyComponent, HTMLStencilElement {}

    var HTMLMyComponentElement: {
      prototype: HTMLMyComponentElement;
      new (): HTMLMyComponentElement;
    };
    

    interface HTMLPcBadgeElement extends StencilComponents.PcBadge, HTMLStencilElement {}

    var HTMLPcBadgeElement: {
      prototype: HTMLPcBadgeElement;
      new (): HTMLPcBadgeElement;
    };
    

    interface HTMLPcCardElementElement extends StencilComponents.PcCardElement, HTMLStencilElement {}

    var HTMLPcCardElementElement: {
      prototype: HTMLPcCardElementElement;
      new (): HTMLPcCardElementElement;
    };
    

    interface HTMLPcCardElement extends StencilComponents.PcCard, HTMLStencilElement {}

    var HTMLPcCardElement: {
      prototype: HTMLPcCardElement;
      new (): HTMLPcCardElement;
    };
    

    interface HTMLPcFabElement extends StencilComponents.PcFab, HTMLStencilElement {}

    var HTMLPcFabElement: {
      prototype: HTMLPcFabElement;
      new (): HTMLPcFabElement;
    };
    

    interface HTMLPcHeaderElement extends StencilComponents.PcHeader, HTMLStencilElement {}

    var HTMLPcHeaderElement: {
      prototype: HTMLPcHeaderElement;
      new (): HTMLPcHeaderElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'my-component': JSXElements.MyComponentAttributes;
    'pc-badge': JSXElements.PcBadgeAttributes;
    'pc-card-element': JSXElements.PcCardElementAttributes;
    'pc-card': JSXElements.PcCardAttributes;
    'pc-fab': JSXElements.PcFabAttributes;
    'pc-header': JSXElements.PcHeaderAttributes;
    }
  }

  namespace JSXElements {

    export interface MyComponentAttributes extends HTMLAttributes {
      'first'?: string;
      'last'?: string;
    }

    export interface PcBadgeAttributes extends HTMLAttributes {
      'bg'?: string;
      'text'?: string;
    }

    export interface PcCardElementAttributes extends HTMLAttributes {
      'bg'?: string;
      'type'?: string;
    }

    export interface PcCardAttributes extends HTMLAttributes {

    }

    export interface PcFabAttributes extends HTMLAttributes {
      'bg'?: string;
    }

    export interface PcHeaderAttributes extends HTMLAttributes {
      'description'?: string;
      'logo'?: string;
      'theme'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement
    'pc-badge': HTMLPcBadgeElement
    'pc-card-element': HTMLPcCardElementElement
    'pc-card': HTMLPcCardElement
    'pc-fab': HTMLPcFabElement
    'pc-header': HTMLPcHeaderElement
  }

  interface ElementTagNameMap {
    'my-component': HTMLMyComponentElement;
    'pc-badge': HTMLPcBadgeElement;
    'pc-card-element': HTMLPcCardElementElement;
    'pc-card': HTMLPcCardElement;
    'pc-fab': HTMLPcFabElement;
    'pc-header': HTMLPcHeaderElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;